---
import Divider from "./Divider.astro";

// Modal.astro - Versión mejorada
interface Props {
  id: string;
  title?: string;
  closeOnOutsideClick?: boolean;
  showCloseButton?: boolean;
  showFooter?: boolean;
  showButton?: boolean; // Nueva prop para mostrar/ocultar botón
  buttonText?: string;
  buttonClass?: string;
  buttonExitClass?: string;
  modalClass?: string;
  overlayClass?: string;
  contentClass?: string;
  triggerElements?: string[]; // Nueva prop para elementos que abren el modal
}

const {
  id,
  title = "",
  closeOnOutsideClick = true,
  showCloseButton = true,
  showFooter = false,
  showButton = true, // Por defecto muestra el botón
  buttonText = "Abrir Modal",
  buttonClass = "cs-bg-blue-400 cs-color-white",
  buttonExitClass = "cs-btn",
  modalClass = "modal",
  overlayClass = "modal-overlay",
  contentClass = "modal-content",
  triggerElements = [], // Array de IDs de elementos que abren el modal
} = Astro.props;
---

<!-- Botón para abrir el modal (condicional) -->{
  showButton && (
    <button id={`btn-${id}`} class={"cs-btn " + buttonClass}>
      {buttonText}
    </button>
  )
}

<!-- Overlay y contenedor del modal -->
<div id={id} class={overlayClass}>
  <div class={modalClass}>
    <div class="modal-header">
      <div>
        {title && <h2>{title}</h2>}
        <Divider width="70%" />
      </div>
      {showCloseButton && <button class="close-btn">&times;</button>}
    </div>
    <div class={contentClass}>
      <slot />
    </div>
    {
      showFooter && (
        <div class="modal-footer">
          <button class={"modal-exit-btn " + buttonExitClass}>Cerrar</button>
        </div>
      )
    }
  </div>
</div>

<style>
  .modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    z-index: 999;
    justify-content: center;
    align-items: center;
    backdrop-filter: blur(4px);
  }

  .modal {
    position: relative;
    width: auto;
    height: auto;
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    /* overflow: hidden; */
    background-color: white;
    border-radius: 22px;
    &::after {
      content: "";
      position: absolute;
      inset: -2px; /* más grande que el card */
      border-radius: 22px;
      background: linear-gradient(
        45deg,
        #64cef4,
        rgba(105, 105, 105, 0.8),
        rgba(105, 105, 105, 0.8),
        #76fb95
      );
      filter: blur(22px);
      z-index: -1;
      opacity: 0.8;
    }
  }

  .modal-header {
    position: relative;
  }

  .modal-header > div {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    gap: 0.5rem;
    width: fit-content;
    margin: 0 auto;
    margin-bottom: 1.2rem;
  }
  .modal-header h2 {
    font-size: 1.5rem;
    font-weight: 600;
    text-align: center;
  }

  .close-btn {
    position: absolute;
    top: -1rem;
    right: 0;
    border: none;
    font-size: 2.5rem;
    cursor: pointer;
    line-height: 1;
    color: #333;
  }

  .close-btn:hover {
    background: white;
    transform: scale(1.1);
  }

  .modal-content {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;

    width: 100%;
    height: 100%;
    box-sizing: border-box;
  }

  .modal-footer {
    display: flex;
    justify-content: end;
  }

  .modal-footer button {
    background: rgba(255, 255, 255, 0.9);
    color: #333;
    border: 1px solid rgba(255, 255, 255, 0.3);
    padding: 10px 20px;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 500;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    transition: all 0.2s ease;
  }

  .modal-footer button:hover {
    background: white;
    transform: translateY(-1px);
  }

  /* Estilos adicionales para elementos clickeables */
  .modal-trigger {
    cursor: pointer;
    transition:
      transform 0.2s ease,
      opacity 0.2s ease;
  }

  .modal-trigger:hover {
    transform: scale(1.05);
    opacity: 0.8;
  }
</style>

<script
  is:inline
  define:vars={{ id, closeOnOutsideClick, triggerElements, showButton }}
>
  document.addEventListener("DOMContentLoaded", () => {
    // Obtenemos referencias a los elementos
    const modal = document.getElementById(id);
    const openBtn = showButton ? document.getElementById(`btn-${id}`) : null;
    const closeBtn = modal.querySelector(".close-btn");
    const exitBtns = modal.querySelectorAll(".modal-exit-btn");

    // Función para abrir el modal
    const openModal = () => {
      modal.style.display = "flex";
      // document.body.style.overflow = "hidden"; // Prevenir scroll del body
    };

    // Función para cerrar el modal
    const closeModal = () => {
      modal.style.display = "none";
      // document.body.style.overflow = "auto"; // Restaurar scroll del body
    };

    // Event listener para el botón de apertura (si existe)
    if (openBtn) {
      openBtn.addEventListener("click", openModal);
    }

    // Event listeners para elementos trigger externos
    triggerElements.forEach((elementId) => {
      const element = document.getElementById(elementId);
      if (element) {
        // Añadir clase para efectos visuales
        element.classList.add("modal-trigger");

        // Añadir event listener
        element.addEventListener("click", openModal);

        // Opcional: añadir atributo para accesibilidad
        element.setAttribute("role", "button");
        element.setAttribute("tabindex", "0");
        element.setAttribute("aria-label", `Abrir modal: ${id}`);

        // Soporte para tecla Enter/Space
        element.addEventListener("keydown", (event) => {
          if (event.key === "Enter" || event.key === " ") {
            event.preventDefault();
            openModal();
          }
        });
      }
    });

    // Event listener para el botón de cierre (X)
    if (closeBtn) {
      closeBtn.addEventListener("click", closeModal);
    }

    // Event listener para todos los botones de salida
    exitBtns.forEach((btn) => {
      btn.addEventListener("click", closeModal);
    });

    // Event listener para cerrar al hacer clic en el overlay
    if (closeOnOutsideClick) {
      modal.addEventListener("click", (event) => {
        if (event.target === modal) {
          closeModal();
        }
      });
    }

    // Event listener para tecla ESC
    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape" && modal.style.display === "flex") {
        closeModal();
      }
    });
  });
</script>
