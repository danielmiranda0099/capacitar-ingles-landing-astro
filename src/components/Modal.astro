---
import Divider from "./Divider.astro";

interface Props {
  id: string;
  title?: string;
  closeOnOutsideClick?: boolean;
  showCloseButton?: boolean;
  showFooter?: boolean;
  showButton?: boolean;
  buttonText?: string;
  buttonClass?: string;
  buttonExitClass?: string;
  modalClass?: string;
  overlayClass?: string;
  contentClass?: string;
  triggerElements?: string[];
}

const {
  id,
  closeOnOutsideClick = true,
  showCloseButton = true,
  showFooter = false,
  showButton = true,
  buttonText = "Abrir Modal",
  buttonClass = "cs-bg-blue-400 cs-color-white",
  buttonExitClass = "cs-btn",
  modalClass = "modal",
  overlayClass = "modal-overlay",
  contentClass = "modal-content",
  triggerElements = [],
} = Astro.props;
---

{
  showButton && (
    <button id={`btn-${id}`} class={"cs-btn " + buttonClass}>
      {buttonText}
    </button>
  )
}

<div id={id} class={overlayClass}>
  <div class="modal-container">
    <div class="modal-glow"></div>
    <div class={modalClass}>
      
        {showCloseButton && <button class="close-btn">&times;</button>}
      
      <div class={contentClass}>
        <slot />
      </div>
      {
        showFooter && (
          <div class="modal-footer">
            <button class={"modal-exit-btn " + buttonExitClass}>Cerrar</button>
          </div>
        )
      }
    </div>
  </div>
</div>

<style>
  /* Animaciones Overlay */
  @keyframes fadeIn {
    from {
      opacity: 0;
      backdrop-filter: blur(0px);
    }
    to {
      opacity: 1;
      backdrop-filter: blur(2.5px);
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
      backdrop-filter: blur(2.5px);
    }
    to {
      opacity: 0;
      backdrop-filter: blur(0px);
    }
  }

  /* Animaciones Modal Content */
  @keyframes slideUp {
    from {
      transform: translateY(150px);
      opacity: 0.7;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes slideDown {
    from {
      transform: translateY(0);
      opacity: 1;
    }
    to {
      transform: translateY(150px);
      opacity: 0;
    }
  }

  .modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.45);
    z-index: 100;
    justify-content: center;
    align-items: center;
  }

  .modal-overlay.show {
    display: flex;
    animation: fadeIn 0.5s forwards;
  }

  .modal-overlay.hide {
    animation: fadeOut 0.5s forwards;
  }

  .modal-container {
    position: relative;
    width: auto;
    height: auto;
    padding: 1.5rem;
    background-color: transparent;
  }

  .modal-glow {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 22px;
    border-radius: 22px;
    background: linear-gradient(
      45deg,
      #64cef4cc,
      #ffffff4f,
      #ffffff4f,
      #76fb95cc
    );
    filter: blur(40px);
    z-index: -1;
  }

  .modal {
    width: auto;
    height: auto;
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    background-color: white;
    border-radius: 22px;
    opacity: 0.9;
    z-index: 1;
    position: relative;
  }

  .modal.opening {
    animation: slideUp 0.7s ease forwards;
  }

  .modal.closing {
    animation: slideDown 0.6s ease forwards;
  }

  .close-btn {
    position: absolute;
    top: 0.5rem;
    right: 1.5rem;
    border: none;
    font-size: 2.5rem;
    cursor: pointer;
    line-height: 1;
    color: #333;
    z-index: 10;
  }

  .close-btn:hover {
    transform: scale(1.1);
  }

  .modal-content {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    box-sizing: border-box;
    z-index: 1;
  }

  .modal-footer {
    display: flex;
    justify-content: end;
  }

  .modal-footer button {
    background: rgba(255, 255, 255, 0.9);
    color: #333;
    border: 1px solid rgba(255, 255, 255, 0.3);
    padding: 10px 20px;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 500;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    transition: all 0.2s ease;
  }

  .modal-footer button:hover {
    background: white;
    transform: translateY(-1px);
  }

  .modal-trigger {
    cursor: pointer;
  }

  .modal-trigger:hover {
    transform: scale(1.05);
    opacity: 0.8;
  }
</style>

<script
  is:inline
  define:vars={{
    id,
    closeOnOutsideClick,
    triggerElements,
    showButton,
    modalClass,
  }}
>
  document.addEventListener("DOMContentLoaded", () => {
    const modal = document.getElementById(id);
    const modalContent = modal.querySelector(`.${modalClass}`);
    const openBtn = showButton ? document.getElementById(`btn-${id}`) : null;
    const closeBtn = modal.querySelector(".close-btn");
    const exitBtns = modal.querySelectorAll(".modal-exit-btn");

    const openModal = () => {
      modal.style.display = "flex";
      modal.classList.remove("hide");
      modal.classList.add("show");
      modalContent.classList.remove("closing");
      modalContent.classList.add("opening");
    };

    const closeModal = () => {
      modalContent.classList.remove("opening");
      modalContent.classList.add("closing");
      modal.classList.remove("show");
      modal.classList.add("hide");

      setTimeout(() => {
        modal.style.display = "none";
      }, 300);
    };

    if (openBtn) openBtn.addEventListener("click", openModal);

    triggerElements.forEach((elementId) => {
      const element = document.getElementById(elementId);
      if (element) {
        element.classList.add("modal-trigger");
        element.addEventListener("click", openModal);
        element.setAttribute("role", "button");
        element.setAttribute("tabindex", "0");
        element.setAttribute("aria-label", `Abrir modal: ${id}`);
        element.addEventListener("keydown", (event) => {
          if (event.key === "Enter" || event.key === " ") {
            event.preventDefault();
            openModal();
          }
        });
      }
    });

    if (closeBtn) closeBtn.addEventListener("click", closeModal);
    exitBtns.forEach((btn) => btn.addEventListener("click", closeModal));

    if (closeOnOutsideClick) {
      modal.addEventListener("click", (event) => {
        if (event.target === modal) {
          closeModal();
        }
      });
    }

    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape" && modal.style.display === "flex") {
        closeModal();
      }
    });
  });
</script>
